(defvar    number_of_workspaces 10)

(deflisten workspaces           :initial  "[]" `scripts/workspaces --get`)
(deflisten active_workspace     :initial  "1"  `scripts/workspaces --active`)
(deflisten window               :initial  "-"  `scripts/window     title`)
(deflisten music
  :initial "{}"
  ; :onchange "eww update revealSpotify=true && sleep 5 && eww update revealSpotify=false"
  "playerctl --follow metadata --format '{ \"artist\": \"{{ artist }}\", \"title\": \"{{ title }}\" }'")

(deflisten music_status "playerctl --follow status")
(deflisten music_virualizer "scripts/cava")

(defpoll   battery              :interval "5s" `scripts/battery`)
(defpoll   network              :interval "5s" `scripts/wifi`)
(defpoll   clock                :interval "1s" `scripts/clock`)
(defpoll   keyboard             :interval "1s" `scripts/keyboard --get`)
(defpoll   sound                :interval "1s" `scripts/sound --get`)
(defpoll   brightness           :interval "1s" :initial "{ \"max\": 255, \"value\": 255 }" `scripts/brightness --get`)
(defpoll   processes            :interval "3s" `scripts/processes --get`)

(defvar    window_rev           false)
(defvar    time_rev             false)
(defvar    wifi_rev             false)
(defvar    batt_rev             false)
(defvar    keyb_rev             false)
(defvar    snd_rev              false)
(defvar    music_rev            false)
(defvar    memory_used_mb       102)
(defvar    memory_free_mb       102)
(defvar    memory_total_mb      102)

(defwindow bar1
  :class "bar"
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :y "3px" :width "1914px" :height "0px" :anchor "top center")
  :exclusive true

  (centerbox :class "main-container"
    (box
      :space-evenly false
      (label :visible false :text active_workspace)
      (workspaces_module :start 1)
      (window_module :start 1))
    (box)
    (box :halign "end"
         :spacing 3
         :space-evenly false
      (music_module)
      (sound_module)
      (keyboard_module)
      (network_module)
      (battery_module)
      (clock_module))))

(defwindow bar2
  :class "bar"
  :monitor 1
  :windowtype "dock"
  :geometry (geometry :y "3px" :width "1914px" :height "0px" :anchor "top center")
  :exclusive true

  (centerbox :class "main-container"
    (box
      :space-evenly false
      (clock_module))
    (box)
    (box
      :halign "end"
      :space-evenly false
      (window_module :start 6)
      (workspaces_module :start 6)
      (label :visible false :text active_workspace))))

(defwidget workspaces_module [start]
  (box :class "module"
       :halign "start"
       :space-evenly false
    (eventbox :class "button workspaces"
              :cursor "pointer"
      (box
        :space-evenly false
        (for workspace in workspaces
          (workspace_button
            :workspace workspace
            :start start))))))

(defwidget workspace_button [workspace start]
  (button
    :class "btn ${workspace.id == active_workspace ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
    :onclick "hyprctl dispatch workspace ${workspace.id}"
    :valign "center"
    :visible {workspace.id >= start && workspace.id <= start + 4}
    (label
      :class "icon"
      :text {workspace.windows > 0 ? "${workspace.id == active_workspace ? "" : ""}" : ""})))

(defwidget window_module [start]
  (eventbox :onhover "eww update window_rev=true"
            :onhoverlost "eww update window_rev=false"
   (label
    :class "window"
    :visible {active_workspace >= start && active_workspace <= start + 4 && window != "null" ? true : false}
    :text {
      window_rev ?
        window :
        strlength(window) > 40 ?
          captures(window, "(.{40})")[0][0] :
          window
    })))

(defwidget music_module []
  (eventbox :onhover "eww update music_rev=true"
            :onhoverlost "eww update music_rev=false"
            :cursor "pointer"
            :onclick "playerctl play-pause"
            :onmiddleclick "playerctl next"
    (box
      :space-evenly false
      ; (label :class "icon"
      ;        :text {music_status == 'Playing' ? "" : ""})
      (label
        :class "window"
        :visible {music_status == 'Playing'}
        :text music_virualizer)
      (label
        :class "window"
        :visible {music.artist != "null"}
        :text {
          music_rev ?
            "[${music.artist}] ${music.title}" :
            strlength(music.title) > 40 ?
              captures(music.title, "(.{40})")[0][0] :
              music.title
        }))))

(defwidget sound_module []
  (eventbox :onhover "eww update snd_rev=true"
            :onhoverlost "eww update snd_rev=false"
            :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" ;:spacing "3"
      (button :class "btn ${snd_rev ? "active" : ""}"
              :onclick "scripts/sound --mute"
        (label :text {sound.icon}
               :class "icon"))
      (revealer :transition "slideleft"
                :reveal snd_rev
                :duration "350ms"
        (scale :onchange "scripts/sound --set $(printf %.0f {})"
               :min 0
               :max 101
               :width 100
               :value {sound.volume}
               :active true)))))

(defwidget keyboard_module []
  (eventbox :onhover "eww update keyb_rev=true"
            :onhoverlost "eww update keyb_rev=false"
            :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" ;:spacing "3"
      (button :class "btn active"
              :onclick "scripts/keyboard --set"
        (label :text {keyboard.icon}
               :class "icon"))
      (revealer :transition "slideleft"
                :reveal keyb_rev
                :duration "350ms"
        (button :class "btn active"
                :onclick "scripts/keyboard --set"
          (label :text {keyboard.layout}))))))

(defwidget network_module []
  (eventbox :onhover "eww update wifi_rev=true"
            :onhoverlost "eww update wifi_rev=false"
            :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" ;:spacing "3"
         :vexpand "false"
         :hexpand "false"
         :space-evenly "false"
      (button :class "btn ${ network.ssid != "" ? "active" : ""}"
              :onclick "networkmanager_dmenu"
              :wrap "false"
              :limit-width 12
        (label :class "icon"
               :text {network.icon}))
      (revealer :transition "slideright"
                :reveal wifi_rev
                :duration "350ms"
        (label :text {network.essid}
               :orientation "h")))))

(defwidget battery_module []
  (eventbox :onhover "eww update batt_rev=true"
            :onhoverlost "eww update batt_rev=false"
            :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" ;:spacing "3"
      (button :class "btn active"
              :onclick "scripts/pop power"
        (label :text {battery.icon}
               :class "icon"))
      (revealer :transition "slideleft"
                :reveal batt_rev
                :duration "350ms"
        (button :class "btn active"
                :onclick "scripts/pop power"
          (label :text "${battery.value}%"
                 :orientation "h"))))))

(defwidget clock_module []
  (eventbox :onhover "eww update time_rev=true"
            :onhoverlost "eww update time_rev=false"
            :cursor "pointer"
    (box :class "module" :space-evenly "false" :orientation "h" ;:spacing "3"
      (label :text {clock.weekday} :class "clock_time_class" )
      (label :text {clock.hour} :class "clock_time_class" )
      (label :text ":" :class "clock_time_sep" )
      (label :text {clock.minute} :class "clock_minute_class")
      (label :text ":" :class "clock_time_sep" :visible time_rev )
      (label :text {clock.second} :class "clock_minute_class" :visible time_rev)
      (revealer :transition "slideleft"
                :reveal time_rev
                :duration "350ms"
        (button :class "btn active"
                :onclick "scripts/pop calendar"
          "${clock.day}/${clock.month}")))))

(defwidget calendar_w []
  (box :class "module cal" :orientation "v"
    (box :class "cal-in"
      (calendar :class "cal"))))

(defwindow calendar_popup
  :monitor 0
  :geometry (geometry :x "3px" :y "3px" :anchor "top right" :width "270px" :height "60px")
  (calendar_w))

(defwidget system []
  (box :class "module sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
    (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value {battery.value}
                         :class "sys_bat"
                         :thickness 9
        (label :text ""
               :class "sys_icon_bat"
               :limit-width 2
               :show_truncated false
               :wrap false))
      (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
        (label :text "battery"
               :halign "start"
               :class "sys_text_bat"
               :limit-width 9
               :show_truncated false
               :wrap false)
        (label :text "${battery.value}%"
               :halign "start"
               :class "sys_text_bat_sub"
               :limit-width 22
               :show_truncated false
               :wrap false)
        (label :text "${battery.value}"
               :halign "start"
               :class "sys_text_bat_sub"
               :limit-width 22
               :show_truncated false
               :wrap false)))
    (label :text "" :class "sys_sep" :halign "center")
    (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value 50
                         :class "sys_mem"
                         :thickness 9
        (label :text ""
               :class "sys_icon_mem"
               :limit-width 2
               :show_truncated false
               :wrap false
               :angle 0.0))
      (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
        (label :text "memory"
               :halign "start"
               :class "sys_text_mem"
               :limit-width 9
               :show_truncated false
               :wrap false)
        (label :text "${memory_used_mb} | ${memory_total_mb}mb "
               :halign "start"
               :class "sys_text_mem_sub"
               :limit-width 22
               :show_truncated false
               :wrap false)
        (label :text "${memory_free_mb}mb free"
               :halign "start"
               :class "sys_text_mem_sub"
               :limit-width 22
               :show_truncated false
               :wrap false)))))

(defwindow system_popup
  :monitor 0
  :geometry (geometry :x "3px" :y "3px" :anchor "top right" :width "290px" :height "120px")
  (system))

(defwidget power []
  (box :class "main-container popup" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
    (box  :class "power module" :orientation "h" :space-evenly "false" :spacing 5 :hexpand "false" :vexpand "false"
      (label :text "" :class "icon")
      (scale :onchange "scripts/brightness --set {}"
             :min 0
             :max {brightness.max}
             :width 250
             :value {brightness.value}
             :active true))
    (box  :class "module" :orientation "v" :space-evenly "false" :spacing 6 :hexpand "false" :vexpand "false"
      (box  :class "header" :orientation "h" :space-evenly "false" :spacing 3 :hexpand "false" :vexpand "false"
        (label :text "" :style "opacity: 0" :class "icon")
        (label :text "command" :width 150 :xalign 0)
        (label :text "CPU" :width 50)
        (label :text "MEM" :width 50))
      (for process in processes
        (eventbox :class "process"
                  :onclick "doas kill ${process.pid}"
                  :onmiddleclick "doas kill -SIGKILL ${process.pid}"
                  :cursor "pointer"
          (box :orientation "h" :space-evenly "false" :spacing 3 :hexpand "false" :vexpand "false"
            (label :text "" :class "close icon")
            (label :text {process.name} :width 150 :xalign 0)
            (label :text "${process.pcpu}%" :width 50)
            (label :text "${process.pmem}%" :width 50)))))))

(defwindow power_popup
  :monitor 0
  :geometry (geometry :x "3px" :y "3px" :anchor "top right")
  (power))
